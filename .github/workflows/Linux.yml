name: Build
on: push

jobs:
  #Linux编译
  Build-Linux:
    #运行平台
    name: Build on Linux
    runs-on: ubuntu-latest
    #编译步骤
    steps:
      #1安装Qt
      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: '5.15.2'
          host: 'linux'
          arch: 'gcc_64'
          modules: qtcharts
          target: 'desktop'
      #2拉取代码
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
      #3编译构建
      - name: Build
        run: |
          qmake
          make
      #4上传artifact
      - name: upload
        uses: actions/upload-artifact@v2
        with:
          name: Heart_Linux
          path: /home/runner/work/Heart/Heart/Heart
          if-no-files-found: error
  #windows编译
  Build-Windows:
    #运行平台
    name: Build on Windows
    runs-on: windows-2019

    env:
      targetName: Heart_Windows.exe
      qt_ver: '5.15.2'          
      qt_arch: 'win64_msvc2019_64'
      msvc_arch: 'x64'
      qt_arch_install: 'msvc2019_64'
      qt_target: 'desktop'
      archiveName: 'Heart_Windows'
    #编译步骤
    steps:
      #安装Qt
      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          # Version of Qt to install
          version: '5.15.2'
          host: 'windows'
          # Target platform for build
          target: 'desktop'
          arch: 'win64_msvc2019_64'
          aqtversion: '==2.0.5'          
      #拉取代码
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
      #编译构建
      - name: Build
        id: build
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" ${{ matrix.msvc_arch }}
          qmake
          make
          echo winSdkDir=%WindowsSdkDir% >> %GITHUB_ENV%
          echo winSdkVer=%WindowsSdkVersion% >> %GITHUB_ENV%
          echo vcToolsInstallDir=%VCToolsInstallDir% >> %GITHUB_ENV%
          echo vcToolsRedistDir=%VCToolsRedistDir% >> %GITHUB_ENV%
      # 打包 
      - name: package
        id: package      
        env:
          archiveName: ${env:qt_ver}-${env:qt_target}-${env:qt_arch}
          msvcArch: ${env:msvc_arch}          
        shell: pwsh
        run: |
          & scripts\windows-publish.ps1 ${env:archiveName} ${env:targetName}
          # 记录packageName给后续step
           $name = ${env:archiveName}
           echo "::set-output name=packageName::$name"       
      # tag 查询github-Release
      # 上传artifacts          
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.package.outputs.packageName }}
          path: ${{ steps.package.outputs.packageName }}